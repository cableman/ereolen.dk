diff --git a/modules/ting_covers/js/ting-covers.js b/modules/ting_covers/js/ting-covers.js
index 0e68aa3..7e2d889 100644
--- a/modules/ting_covers/js/ting-covers.js
+++ b/modules/ting_covers/js/ting-covers.js
@@ -3,23 +3,20 @@
 
   // Helper function to get information about a given cover place holder.
   var ting_covers_extract_data = function(e) {
-    var classname = $(e).attr('class');
-    var local_id = classname.match(/ting-cover-object-id-(\S+)/);
-    var image_style = classname.match(/ting-cover-style-(\S+)/);
-    var owner_id = classname.match(/ting-cover-owner-id-(\S+)/);
-    if (!local_id) {
+    var id = $(e).data('ting-cover-object-id');
+    var image_style = $(e).data('ting-cover-style');
+    if (!id) {
       return false;
     }
     return {
-      local_id : local_id[1],
-      owner_id : owner_id[1],
-      image_style : image_style[1]
+      id : id,
+      image_style : image_style
     };
   };
 
   var ting_cover_insert = function(covers) {
     $.each(covers, function(index, cover_info) {
-      $('.ting-cover-processing' + '.ting-cover-object-id-' + cover_info.local_id + '.ting-cover-style-' + cover_info.image_style).html('<img src="' + cover_info.url + '"/>');
+      $('.ting-cover-processing[data-ting-cover-object-id="' + cover_info.id + '"][data-ting-cover-style="' + cover_info.image_style + '"').html('<img src="' + cover_info.url + '"/>');
     });
   };
 
diff --git a/modules/ting_covers/ting_covers.module b/modules/ting_covers/ting_covers.module
index c6acd89..3f28970 100644
--- a/modules/ting_covers/ting_covers.module
+++ b/modules/ting_covers/ting_covers.module
@@ -41,16 +41,6 @@ function ting_covers_menu() {
     'weight' => -10,
   );
 
-  $items['admin/config/ting/covers/addi'] = array(
-    'title' => 'ADDI service',
-    'description' => 'Configure integration with the ADDI service.',
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('ting_covers_admin_addi_settings_form'),
-    'access arguments' => array('administer site configuration'),
-    'file' => 'ting_covers.admin.inc',
-    'type' => MENU_LOCAL_TASK,
-  );
-
   return $items;
 }
 
@@ -74,20 +64,6 @@ function ting_covers_cron() {
 }
 
 /**
- * Implements hook_ding_install_tasks().
- */
-function ting_covers_ding_install_tasks() {
-  module_load_include('inc', 'ting_covers', 'ting_covers.admin');
-  return array(
-    'ting_covers_admin_addi_settings_form' => array(
-      'display_name' => st('ADDI service settings'),
-      'type' => 'form',
-      'file' => drupal_get_path('module', 'ting_covers') . '/ting_covers.admin.inc',
-    ),
-  );
-}
-
-/**
  * Template preprocessor.
  */
 function ting_covers_preprocess_ting_object(&$variables) {
@@ -144,3 +120,68 @@ function _ting_covers_delete_old_files($time = NULL) {
 function ting_covers_object_path($object_id) {
   return file_default_scheme() . '://ting' . DIRECTORY_SEPARATOR . 'covers' . DIRECTORY_SEPARATOR . 'object' . DIRECTORY_SEPARATOR . md5($object_id) . '.jpg';
 }
+
+/**
+ * Get covers for an array of ids.
+ *
+ * @param array $requested_covers
+ *   Array keyed by id with each element being an array with one key.
+ *     image_style: The name of the image style to get the image in.
+ *
+ * @return array
+ *   Array of the same type as input, but with the key 'url' added.
+ *   This key has the url of the image with that image style.
+ */
+function ting_covers_load($requested_covers) {
+  $entities = array();
+  $covers = array();
+
+  // Create array of loaded entities for passing to hooks.
+  foreach ($requested_covers as $id => $cover_info) {
+    // Determine if the local id is a known negative.
+    if (cache_get('ting_covers:' . $id, FALSE)) {
+      continue;
+    }
+
+    // If we we already have a valid cover image, use it.
+    $path = ting_covers_object_path($id);
+    if (file_exists($path)) {
+      $covers[$id] = $path;
+      continue;
+    }
+
+    // If all else fails, try to fetch cover image from hooks.
+    $entities[$id] = ding_entity_load($id);
+  }
+
+  // Go through all modules that implement hook.
+  foreach (module_implements('ting_covers') as $module) {
+    // Fetch covers from hook.
+    $covers_found = module_invoke($module, 'ting_covers', $entities);
+    $covers += $covers_found;
+
+    // Remove elements from entities, where a cover has been found.
+    foreach (array_keys($covers_found) as $id) {
+      if (isset($entities[$id])) {
+        unset($entities[$id]);
+      }
+    }
+  }
+
+  // Mark all remaining as not found in cache.
+  foreach ($entities as $id => $entity) {
+    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
+  }
+
+  // Go through all found covers, and return them in the correct style.
+  $return = array();
+  foreach ($covers as $id => $cover) {
+    $style = $requested_covers[$id]['image_style'];
+    $return[$id] = array(
+      'image_style' => $style,
+      'url' => image_style_url($style, $cover),
+    );
+  }
+
+  return $return;
+}
diff --git a/modules/ting_covers/ting_covers.pages.inc b/modules/ting_covers/ting_covers.pages.inc
index 109acb9..8f8dcdc 100644
--- a/modules/ting_covers/ting_covers.pages.inc
+++ b/modules/ting_covers/ting_covers.pages.inc
@@ -9,110 +9,19 @@
  * Return the URL for the cover of an object.
  */
 function ting_covers_objects() {
-  $covers = array();
-  $image_styles = array();
-  $missing_images_local_ids = array();
+  $cover_request = array();
 
   foreach ($_POST['coverData'] as $cover_info) {
-    // Determine if the local id is a known negative.
-    if (cache_get('ting_covers:' . $cover_info['local_id'], FALSE)) {
-      break;
-    }
-
-    $path = ting_covers_object_path($cover_info['local_id']);
-    if (file_exists($path)) {
-      // If we we already have a valid cover image w/o style then just use it.
-      $covers[] = array(
-        'local_id' => $cover_info['local_id'],
-        'image_style' => $cover_info['image_style'],
-        'url' => image_style_url($cover_info['image_style'], $path),
-      );
-    }
-    else {
-      // Mark the image for retrieval.
-      $missing_images_local_ids[] = (object) array(
-        'localIdentifier' => $cover_info['local_id'],
-        'libraryCode' => $cover_info['owner_id'],
-      );
-
-      // Image style to match later one.
-      $image_styles[$cover_info['local_id']] = $cover_info['image_style'];
-    }
+    $cover_request[$cover_info['id']] = array(
+      'image_style' => $cover_info['image_style'],
+    );
   }
 
-  // Try to download the missing images.
-  try {
-    $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
-
-    // Local ids = Faust numbers. Library object identifiers can be confusing.
-    $additional_informations = $service->getByLocalIdentifier($missing_images_local_ids);
-    foreach ($missing_images_local_ids as $local_id) {
-      // Try to extract the image url from the result.
-      $source_url = FALSE;
-      if (isset($additional_informations[$local_id->localIdentifier]) && $ai = $additional_informations[$local_id->localIdentifier]) {
-        if ($ai->detailUrl) {
-          $source_url = $ai->detailUrl;
-        }
-        elseif ($ai->thumbnailUrl) {
-          $source_url = $ai->thumbnailUrl;
-        }
-      }
-
-      // No cover image found? Cache this for future reference to avoid
-      // unnecessary requests.
-      if (!$source_url) {
-        cache_set('ting_covers:' . $local_id->localIdentifier, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
-        continue;
-      }
-
-      // Try to download the image locally.
-      if ($file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id->localIdentifier), $source_url)) {
-        // Generate a path corresponding to the downloaded image, styled.
-        $covers[] = array(
-          'local_id' => $local_id->localIdentifier,
-          'image_style' => $image_styles[$cover_info['local_id']],
-          'url' => image_style_url($image_styles[$cover_info['local_id']], $file),
-        );
-      }
-    }
-  }
-  catch (Exception $e) {
-    watchdog('ting_covers', 'Unable to retrieve covers from ADDI: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
-  }
+  $covers = ting_covers_load($cover_request);
+  array_walk($covers, function(&$elem, $key) {
+    $elem['id'] = "" . $key;
+  });
 
   // Return all image information.
-  drupal_json_output($covers);
-}
-
-/**
- * Helper function to fetch and save a cover image file.
- *
- * @see image_style_create_derivative()
- *
- * @param string $filename
- *   File name, including its path within Drupal's file folder.
- * @param string $image_url
- *   URL for the source image file.
- *
- * @return mixed
- *   A file object or FALSE on error.
- */
-function _ting_covers_pages_fetch_image($filename, $image_url) {
-  $result = drupal_http_request($image_url);
-
-  // Bail if the HTTP request failed.
-  if ($result->code != 200) {
-    return FALSE;
-  }
-
-  // Get the folder for the final location of this preset.
-  $directory = dirname($filename);
-
-  // Build the destination folder tree if it doesn't already exist.
-  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
-    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
-    return FALSE;
-  }
-
-  return file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);
+  drupal_json_output(array_values($covers));
 }
diff --git a/modules/ting_covers/ting_covers.theme.inc b/modules/ting_covers/ting_covers.theme.inc
index e034091..cb006b7 100644
--- a/modules/ting_covers/ting_covers.theme.inc
+++ b/modules/ting_covers/ting_covers.theme.inc
@@ -18,14 +18,15 @@ function template_preprocess_ting_object_cover(&$variables) {
   // Set initial values required by the template.
   $variables['classes'] = array(
     'ting-cover',
-    'ting-cover-object-id-' . $object->localId,
-    'ting-cover-style-' . $variables['image_style'],
-    'ting-cover-owner-id-' . $object->ownerId,
+  );
+  $variables['data'] = array(
+    'ting-cover-object-id' => $object->id,
+    'ting-cover-style' => $variables['image_style'],
   );
   $variables['image'] = '';
 
   // If we already have the image available locally then just use it.
-  $path = ting_covers_object_path($object->localId);
+  $path = ting_covers_object_path($object->id);
   if (file_exists($path)) {
     // Generate an alt tag.
     $alt = implode(', ', $object->creators) . ': ' . $object->title;
@@ -39,7 +40,7 @@ function template_preprocess_ting_object_cover(&$variables) {
     // Avoid further javascript processing.
     $variables['classes'][] = 'ting-cover-processed';
   }
-  elseif (cache_get('ting_covers:' . $object->localId)) {
+  elseif (cache_get('ting_covers:' . $object->id)) {
     // We know that there is no cover available for this object so avoid
     // further javascript processing.
     $variables['classes'][] = 'ting-cover-processed';
@@ -52,5 +53,9 @@ function template_preprocess_ting_object_cover(&$variables) {
  * Default theme function implementation.
  */
 function theme_ting_object_cover($variables) {
-  return '<div class="' . implode(' ', $variables['classes']) . '">' . $variables['image'] . '</div>';
+  $data = "";
+  foreach ($variables['data'] as $name => $value) {
+    $data .= 'data-' . $name . '="' . htmlentities($value) . '" ';
+  }
+  return '<div class="' . implode(' ', $variables['classes']) . '" ' . trim($data) . '>' . $variables['image'] . '</div>';
 }
diff --git a/modules/ting_covers/lib/addi-client/AdditionalInformation.php b/modules/ting_covers_addi/lib/addi-client/AdditionalInformation.php
similarity index 100%
rename from modules/ting_covers/lib/addi-client/AdditionalInformation.php
rename to modules/ting_covers_addi/lib/addi-client/AdditionalInformation.php
diff --git a/modules/ting_covers/lib/addi-client/AdditionalInformationException.php b/modules/ting_covers_addi/lib/addi-client/AdditionalInformationException.php
similarity index 100%
rename from modules/ting_covers/lib/addi-client/AdditionalInformationException.php
rename to modules/ting_covers_addi/lib/addi-client/AdditionalInformationException.php
diff --git a/modules/ting_covers/lib/addi-client/AdditionalInformationService.php b/modules/ting_covers_addi/lib/addi-client/AdditionalInformationService.php
similarity index 100%
rename from modules/ting_covers/lib/addi-client/AdditionalInformationService.php
rename to modules/ting_covers_addi/lib/addi-client/AdditionalInformationService.php
diff --git a/modules/ting_covers_addi/ting_covers_addi.admin.inc b/modules/ting_covers_addi/ting_covers_addi.admin.inc
new file mode 100644
index 0000000..61fd8d6
--- /dev/null
+++ b/modules/ting_covers_addi/ting_covers_addi.admin.inc
@@ -0,0 +1,61 @@
+<?php
+/**
+ * @file
+ * Administration interface for the module, which allows configuration of
+ * moreinfo end-points and cache lifetime.
+ */
+
+/**
+ * Form builder; Configure ADDI settings for this site.
+ *
+ * @ingroup forms
+ * @see system_settings_form()
+ */
+function ting_covers_addi_admin_settings_form($form, &$form_state) {
+  $form['addi'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Additional Information settings'),
+    '#description' => t('The Additional Information service is used to retrieve cover images. <a href="http://www.danbib.dk/index.php?doc=moreinfo">More information about the service (in Danish)</a>'),
+    '#tree' => FALSE,
+  );
+
+  $form['addi']['addi_wsdl_url'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Service URL'),
+    '#description' => t('URL to the Additional Information webservice, e.g. http://moreinfo.addi.dk/2.1/'),
+    '#required' => TRUE,
+    '#default_value' => variable_get('addi_wsdl_url', ''),
+  );
+
+  $form['addi']['addi_username'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Username'),
+    '#description' => t('VIP database username'),
+    '#required' => TRUE,
+    '#default_value' => variable_get('addi_username', ''),
+  );
+
+  $form['addi']['addi_group'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Group'),
+    '#description' => t('User group (normally library ID)'),
+    '#required' => TRUE,
+    '#default_value' => variable_get('addi_group', ''),
+  );
+
+  $form['addi']['addi_password'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Password'),
+    '#description' => t('VIP database password'),
+    '#required' => TRUE,
+    '#default_value' => variable_get('addi_password', ''),
+  );
+
+  $form['addi']['addi_enable_logging'] = array(
+    '#type' => 'checkbox',
+    '#title' => t('Enable logging'),
+    '#default_value' => variable_get('addi_enable_logging', FALSE),
+  );
+
+  return system_settings_form($form);
+}
diff --git a/modules/ting_covers_addi/ting_covers_addi.info b/modules/ting_covers_addi/ting_covers_addi.info
new file mode 100644
index 0000000..f5cbdc1
--- /dev/null
+++ b/modules/ting_covers_addi/ting_covers_addi.info
@@ -0,0 +1,10 @@
+name = Ting covers Addi
+description = Implementing getting covers from Addi
+package = Ding!
+version = "7.x-0.1"
+core = "7.x"
+dependencies[] = ting
+dependencies[] = ting_covers
+files[] = lib/addi-client/AdditionalInformation.php
+files[] = lib/addi-client/AdditionalInformationException.php
+files[] = lib/addi-client/AdditionalInformationService.php
diff --git a/modules/ting_covers_addi/ting_covers_addi.install b/modules/ting_covers_addi/ting_covers_addi.install
new file mode 100644
index 0000000..2eb0e04
--- /dev/null
+++ b/modules/ting_covers_addi/ting_covers_addi.install
@@ -0,0 +1,5 @@
+<?php
+/**
+ * @file
+ * Module installation and updates routine.
+ */
diff --git a/modules/ting_covers_addi/ting_covers_addi.module b/modules/ting_covers_addi/ting_covers_addi.module
new file mode 100644
index 0000000..b2d8ddb
--- /dev/null
+++ b/modules/ting_covers_addi/ting_covers_addi.module
@@ -0,0 +1,124 @@
+<?php
+/**
+ * @file
+ * Provide functionality and page callbacks for retrieving covers for Ting
+ * objects and collections from AdditionalInformation service.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function ting_covers_addi_menu() {
+  $items = array();
+
+  $items['admin/config/ting/covers/addi'] = array(
+    'title' => 'ADDI service',
+    'description' => 'Configure integration with the ADDI service.',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('ting_covers_addi_admin_settings_form'),
+    'access arguments' => array('administer site configuration'),
+    'file' => 'ting_covers_addi.admin.inc',
+    'type' => MENU_LOCAL_TASK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_ding_install_tasks().
+ */
+function ting_covers_addi_ding_install_tasks() {
+  module_load_include('inc', 'ting_covers_addi', 'ting_covers_addi.admin');
+  return array(
+    'ting_covers_addi_admin_settings_form' => array(
+      'display_name' => st('ADDI service settings'),
+      'type' => 'form',
+      'file' => drupal_get_path('module', 'ting_covers_addi') . '/ting_covers_addi.admin.inc',
+    ),
+  );
+}
+
+/**
+ * Implements hook_ting_covers().
+ *
+ * Fetch covers from AdditionalInformation service.
+ */
+function ting_covers_addi_ting_covers($entities) {
+  $covers = array();
+
+  // Exceptions should only be thrown if something is so wrong,
+  // that no images can be fetched whatsoever.
+  try {
+    $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));
+
+    // We need to extract data the way we need it.
+    $id_map = array();
+    $local_ids = array();
+    foreach ($entities as $id => $entity) {
+      $local_id = $entity->localId;
+      $id_map[$local_id] = $id;
+      $local_ids[] = $local_id;
+    }
+
+    // Local ids = Faust numbers. Library object identifiers can be confusing.
+    $retrieved = $service->getByFaustNumber($local_ids);
+
+    foreach ($retrieved as $local_id => $cover) {
+      // Try to extract the image url from the result.
+      $source_url = FALSE;
+      if ($cover->detailUrl) {
+        $source_url = $cover->detailUrl;
+      }
+      elseif ($cover->thumbnailUrl) {
+        $source_url = $cover->thumbnailUrl;
+      }
+
+      // Try to download the image locally.
+      if ($source_url && $download = _ting_covers_addi_fetch_image(ting_covers_object_path($local_id), $source_url)) {
+        $covers[$id_map[$local_id]] = $download;
+      }
+    }
+  }
+  catch (Exception $e) {
+    watchdog('ting_covers', 'Unable to retrieve covers from ADDI: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
+
+    // Error in fetching, return no covers.
+    return array();
+  }
+
+  // Return all image information.
+  return $covers;
+}
+
+/**
+ * Helper function to fetch and save a cover image file.
+ *
+ * @see image_style_create_derivative()
+ *
+ * @param string $filename
+ *   File name, including its path within Drupal's file folder.
+ * @param string $image_url
+ *   URL for the source image file.
+ *
+ * @return mixed
+ *   A file object or FALSE on error.
+ */
+function _ting_covers_addi_fetch_image($filename, $image_url) {
+  $result = drupal_http_request($image_url);
+
+  // Bail if the HTTP request failed.
+  if ($result->code != 200) {
+    return FALSE;
+  }
+
+  // Get the folder for the final location of this preset.
+  $directory = dirname($filename);
+
+  // Build the destination folder tree if it doesn't already exist.
+  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
+    watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
+    return FALSE;
+  }
+
+  return file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);
+}
