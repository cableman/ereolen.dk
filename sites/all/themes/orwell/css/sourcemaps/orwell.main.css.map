{"version":3,"sources":["base/_base.scss","../node_modules/bourbon/app/assets/stylesheets/css3/_font-face.scss","bootstrap/_fonts.scss","orwell.main.css","component/_footer.scss","bootstrap/_colors.scss","../node_modules/bourbon-neat/core/neat/mixins/_grid-media.scss"],"names":[],"mappings":"AAAA;EACE,oCAAmC;CACpC;;AAED;EACE,gBAAe;CAChB;;ACOC;EACE,6BCZ8B;EDa9B,mBAXY;EAYZ,iBCd+G;CCUlH;;ACVD;EACE,0BCHiB;EDIjB,aAAY;EACZ,gBAAe;EACf,yCFHwC;EEIxC,iBAAgB;EAChB,YAAW;EACX,YAAW;EACX,sBAAqB;CA6EtB;;AA3EC;EACE,mBAAkB;EAClB,kBAAiB;EACjB,eAAc;CAMf;;AEuCD;EFhDA;IAMI,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,gBAAe;GAElB;CDeF;;AClCD;EAuBM,qBAAoB;CACrB;;AAxBL;EA6BM,2BAA0B;CAC3B;;AA9BL;EAkCI,cAAa;EACb,UAAS;EACT,WAAU;CAeX;;AEOD;EF1DF;IAuCM,eAAc;GAYjB;CDGF;;ACtDD;EA2CM,iBAAgB;EAChB,WAAU;EACV,UAAS;CAKV;;AEQH;EF1DF;IAgDQ,0BAAyB;GAE5B;CDgBJ;;AClED;EAwDM,eAAc;EACd,eC1Da;ED2Db,kBAAiB;EACjB,sBAAqB;EACrB,mBAAkB;CACnB;;AEHH;EF1DF;IAgEM,oBAAO;IAAP,YAAO;IAAP,QAAO;GAEV;CDcF;;AChFD;EAqEI,aAAY;EACZ,+CAA8C;EAC9C,gBAAe;EACf,0BAAyB;EACzB,kBAAiB;EACjB,UAAS;EACT,cAAa;CAKd;;AEtBD;EF1DF;IA8EM,iBAAgB;GAEnB;CDgBF;;AChGD;EAmFI,UAAS;CACV","file":"../orwell.main.css","sourcesContent":["* {\n  -webkit-font-smoothing: antialiased;\n}\n\nhtml {\n  font-size: 100%;\n}\n","@mixin font-face(\n  $font-family,\n  $file-path,\n  $weight: normal,\n  $style: normal,\n  $asset-pipeline: $asset-pipeline,\n  $file-formats: eot woff2 woff ttf svg) {\n\n  $user-deprecation-warnings-setting: $output-bourbon-deprecation-warnings;\n  $output-bourbon-deprecation-warnings: false !global;\n\n  $font-url-prefix: font-url-prefixer($asset-pipeline);\n\n  @font-face {\n    font-family: $font-family;\n    font-style: $style;\n    font-weight: $weight;\n\n    src: font-source-declaration(\n      $font-family,\n      $file-path,\n      $asset-pipeline,\n      $file-formats,\n      $font-url-prefix\n    );\n  }\n\n  $output-bourbon-deprecation-warnings: $user-deprecation-warnings-setting !global;\n}\n","@import 'bourbon';\n\n@include font-face(\"SourceSansPro\", \"./fonts/SourceSansPro/SourceSansPro-Regular\", $file-formats: otf, $weight: 700);\n$font-regular: 'SourceSansPro', sans-serif;\n","* {\n  -webkit-font-smoothing: antialiased;\n}\n\nhtml {\n  font-size: 100%;\n}\n\n@font-face {\n  font-family: \"SourceSansPro\";\n  font-style: normal;\n  font-weight: 700;\n}\n\n.footer {\n  background-color: #282828;\n  color: white;\n  font-size: 100%;\n  font-family: \"SourceSansPro\", sans-serif;\n  overflow: hidden;\n  width: 100%;\n  float: left;\n  display: inline-block;\n}\n\n.footer-inner {\n  position: relative;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n@media all and (min-width: 49rem) {\n  .footer-inner {\n    display: flex;\n    padding: 4rem 0;\n  }\n}\n\n.footer .menu a {\n  text-transform: none;\n}\n\n.footer a:hover {\n  text-decoration: underline;\n}\n\n.footer ul {\n  display: none;\n  margin: 0;\n  padding: 0;\n}\n\n@media all and (min-width: 49rem) {\n  .footer ul {\n    display: block;\n  }\n}\n\n.footer ul li {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n@media all and (min-width: 49rem) {\n  .footer ul li {\n    display: block !important;\n  }\n}\n\n.footer .panel-pane a {\n  display: block;\n  color: #787878;\n  font-size: 1.1rem;\n  text-decoration: none;\n  padding: 1rem 2rem;\n}\n\n@media all and (min-width: 49rem) {\n  .footer .panel-pane {\n    flex: 1;\n  }\n}\n\n.footer .pane-title {\n  color: white;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  cursor: pointer;\n  text-transform: uppercase;\n  font-size: 1.1rem;\n  margin: 0;\n  padding: 2rem;\n}\n\n@media all and (min-width: 49rem) {\n  .footer .pane-title {\n    border-top: none;\n  }\n}\n\n.footer .leaf {\n  margin: 0;\n}\n","@import \"bootstrap/bootstrap\";\n\n.footer {\n  background-color: $footer-bg;\n  color: white;\n  font-size: 100%;\n  font-family: $font-regular;\n  overflow: hidden;\n  width: 100%;\n  float: left;\n  display: inline-block;\n\n  &-inner {\n    position: relative;\n    max-width: 1200px;\n    margin: 0 auto;\n\n    @include grid-media($medium){\n      display: flex;\n      padding: 4rem 0;\n    }\n  }\n\n  .menu {\n    a {\n      text-transform: none;\n    }\n  }\n\n  a {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  ul {\n    display: none;\n    margin: 0;\n    padding: 0;\n\n    @include grid-media($medium){\n      display: block;\n    }\n\n    li {\n      list-style: none;\n      padding: 0;\n      margin: 0;\n\n      @include grid-media($medium){\n        display: block !important;\n      }\n    }\n  }\n\n  .panel-pane {\n\n    a {\n      display: block;\n      color: $font-gray;\n      font-size: 1.1rem;\n      text-decoration: none;\n      padding: 1rem 2rem;\n    }\n\n    @include grid-media($medium){\n      flex: 1;\n    }\n  }\n\n  .pane-title {\n    color: white;\n    border-top: 1px solid rgba(255, 255, 255, 0.2);\n    cursor: pointer;\n    text-transform: uppercase;\n    font-size: 1.1rem;\n    margin: 0;\n    padding: 2rem;\n\n    @include grid-media($medium){\n      border-top: none;\n    }\n  }\n\n  .leaf {\n    margin: 0;\n  }\n}\n","$footer-bg: #282828;\n$font-gray: #787878;\n","@charset \"UTF-8\";\n/// `grid-media` allows you to change your layout based on a media query.\n/// For example, an object can span 3 columns on small screens and 6 columns\n/// on large screens.\n///\n/// You can take this a step further and set different grid attributes like\n/// gutter size and total column count for each media query. So, for example,\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\n/// screens.\n///\n/// @group features\n///\n/// @name Grid media\n///\n/// @argument {map} $grid\n///   The grid to be used within the scope of the block.\n///   This grid should include the `media` property to determine the expression\n///   for the media query.\n///\n/// @content\n///   Grid media will temporarily the override the default grid with the\n///   attributes of the custom grid. This change is scoped to within the mixin\n///   block, and once the mixin has ended the default grid will revert to its\n///   original state as defined by `$neat-grid`. This allows for different\n///   gutter width and column count based on screen size or other properties.\n///\n/// @example scss\n///   $custom-neat-grid: (\n///     columns: 12,\n///     gutter: 50px,\n///     media: 1000px,\n///   );\n///\n///   .element {\n///     @include grid-column(3);\n///\n///     @include grid-media($custom-neat-grid){\n///       @include grid-column(6);\n///     }\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n///\n///   @media only screen and (min-width: 1000px) {\n///     .element {\n///       width: calc(50% - 75px);\n///       float: left;\n///       margin-left: 50px;\n///     }\n///   }\n\n@mixin grid-media($grid) {\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: map-merge($neat-grid, $grid) !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n}\n"]}