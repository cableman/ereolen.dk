<?php
/**
 * @file
 * Code for the eReolen search module feature.
 */

/**
 * Implements hook_search_info_alter().
 *
 * Switch out the conditions callback for our own, for altering it.
 */
function reol_search_search_info_alter(&$search_hooks) {
  $search_hooks['ting_search']['conditions_callback'] = 'reol_search_conditions_callback';
}

/**
 * Custom conditions callback for ting_search.
 *
 * Use by-ref $keys, to allow us to alter the keys used for searching.
 */
function reol_search_conditions_callback(&$keys) {
  $conditions = ting_search_conditions_callback($keys);

  // $keys will be passed through 'ting_search_string_to_cql', during
  // ting_search_search_execute().
  // _ting_search_quote will check whether or not the string is already a
  // CQL string. If not it will add 'and' between all words. We do not want and
  // added between the words. The detection function will report that the string
  // is already a CQL-string if it contains 'or', so we are safe.
  $search_string = _ting_search_quote($keys);
  $search_keys = 'term.publisher="' . str_replace('"', '', $keys) . '"';
  $keys = '(' . $search_string . ') or ' . $search_keys;

  return $conditions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reol_search_form_search_block_form_alter(&$form, &$form_state) {
  // We only want to alter the search form, when we are on the search page.
  if (arg(0) == 'search' && count(search_get_info()) > 1) {
    $options = array();
    foreach (search_get_info() as $info) {
      // Since modules alter the default tab title, get the info from menu.
      $menu_info = menu_get_item('search/' . $info['path']);
      $options[url('search/' . $info['path'])] = $menu_info['title'];
    }
    $form['search_type'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value' => url('search/' . arg(1)),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'reol_search') . '/js/reol_search.search_form.js',
        ),
      ),
    );
  }
}
