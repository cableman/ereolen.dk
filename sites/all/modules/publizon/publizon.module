<?php
/**
 * @file
 * Code for the Publizon provider feature.
 */

include_once 'publizon.features.inc';
require_once drupal_get_path('module', 'publizon') . '/includes/publizon.admin.inc';

/**
 * Define the providers that are provided by publizon.
 *
 * @return array
 *   The array definition for ding_provider.
 */
function publizon_ding_provider() {
  $path = drupal_get_path('module', 'publizon') . '/includes';

  return array(
    'title' => 'Publizon provider',
    'settings' => 'publizon_settings_form',
    'provides' => array(
      'user' => array(
        'prefix' => 'user',
        'file' => $path . '/publizon.user.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => $path . '/publizon.loan.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => $path . '/publizon.reservation.inc',
      ),
      'availability' => array(
        'prefix' => 'availability',
        'file' => $path . '/publizon.availability.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => $path . '/publizon.debt.inc',
      ),
    ),
  );
}

/**
 * Search the T!NG data well for information based on ISBN.
 *
 * If more than one match is found only the first match is returned.
 *
 * TODO Not tested. Should problably be rewritten for newer Ding.
 *
 * @param string $isbn
 *   ISBN number for the product that is searched.
 *
 * @return TingObject
 *   Datawell object for the product found, if non is found FALSE will be
 *   returned.
 */
function publizon_ting_find_object($isbn) {
  // Ensure that the ting client is available.
  module_load_include('client.inc', 'ting');

  // Build ting request.
  $request = ting_get_request_factory()->getSearchRequest();
  $request = ting_add_agency($request);
  $request = ting_add_profile($request);

  // Try to fetch ting object based on ISBN number. Sadly not all object in
  // ebooks or net sound have ISBN, but uses oss:PROVIDER-ID, which we can not
  // search directly on (so no dc.identifier=*). Also therefor it have been
  // renamed, because it does not only find object by ISBN.
  $request->setQuery($isbn);
  $request->setNumResults(1);

  // Execute the fetch.
  $response = ting_execute($request);
  $object = FALSE;
  if (isset($response->collections[0]->objects[0])) {
    $object = $response->collections[0]->objects[0];
  }

  return $object;
}

/**
 * Get publizon libraries.
 *
 * Helper function that findes all libraries stored in the Publizon
 * configuration and returns the library names indexed by retailer id.
 *
 * @staticvar array $retailers
 *   Static cache used to speed-up the search if call more than once.
 *
 * @param bool $reset
 *   If TRUE the static cache will be rebuild. Defaults to FALSE.
 *
 * @return array
 *   Library names indexed by retailer id.
 */
function publizon_get_libraries($reset = FALSE) {
  static $libraries;
  if (!isset($libraries) || $reset) {
    $libraries = variable_get('publizon_libraries', array());
    if (empty($libraries)) {
      // We are missing some library configuration here.
      drupal_set_message(t('You need to login as administrator and configure Publizon library lists'), 'warning', FALSE);
      return array();
    }

    // Sort the libraries by library name.
    setlocale(LC_ALL, 'da_DK.UTF8');
    uasort($libraries, function($e1, $e2) {
      return strcoll($e1['library_name'], $e2['library_name']);
    });
    setlocale(LC_ALL, '');
  }

  return $libraries;
}

/**
 * Get single library.
 *
 * Helper function that loads Publizon configuration information about a given
 * library and return the information as an array. The array contains
 * retailer_id, retailer_key_code and library_name.
 *
 * @staticvar array $libraries
 *   Static cache used to speed-up the search if call more than once.
 *
 * @param string $retailer_id
 *   Retailer id that identifies the library at Publizon.
 * @param bool $reset
 *   If TRUE the static cache will be rebuild. Defaults to FALSE.
 *
 * @return array
 *   Basic information about the library entered at the publizon administration
 *   interface.
 */
function publizon_get_library($retailer_id, $reset = FALSE) {
  static $libraries;
  if (!isset($libraries) || !isset($libraries[$retailer_id]) || $reset) {
    $libraries = variable_get('publizon_libraries', array());
    if (empty($libraries)) {
      // We are missing som library configuration here.
      drupal_set_message(t('You need to login as administrator and configure Publizon library lists'), 'warning', FALSE);
      return array();
    }
  }
  return isset($libraries[$retailer_id]) ? $libraries[$retailer_id] : array();
}

/**
 * Get the client id to send to Publizon.
 *
 * @return string
 *   The client id.
 */
function publizon_get_client_id() {
  return variable_get('publizon_client_id', '');
}

/**
 * Get all libraries as a list usable in a select form item.
 *
 * @return array
 *   Array of libraries keyed by retailer id.
 */
function publizon_get_libraries_list() {
  return array_map(function ($elem) {
    return $elem['library_name'];
  }, publizon_get_libraries());
}

/**
 * Implements hook_ting_covers().
 *
 * Fetch covers from Publizon.
 */
function publizon_ting_covers($entities) {
  $covers = array();

  foreach ($entities as $id => $entity) {
    $local_id = $entity->localId;

    $isbn = reol_base_get_isbn($local_id);
    // If we do not have an ISBN, we do not wish to handle it.
    if (!$isbn) {
      continue;
    }

    // Get the cover image from Publizon.
    $client = PublizonClient::getClient();

    $uri = $client->getCoverUri($isbn);

    // If no cover was found, continue.
    if (empty($uri)) {
      continue;
    }

    // Try to download the image.
    $result = drupal_http_request($uri);

    // If download failed, continue.
    if ($result->code != 200) {
      continue;
    }

    $filename = ting_covers_object_path($local_id);
    $directory = dirname($filename);

    // Build the destination folder tree if it doesn't already exist.
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      watchdog('ting_covers', 'Failed to create directory: %directory', array('%directory' => $directory), WATCHDOG_ERROR);
      continue;
    }

    // Try to save the file.
    $file = file_unmanaged_save_data($result->data, $filename, FILE_EXISTS_REPLACE);

    // If successfull, return file object for this one.
    if ($file) {
      $covers[$id] = $file;
    }
  }

  return $covers;
}

/*
 * Get the retailer id for a user.
 *
 * @param StdClass $account
 *   The user object.
 *
 * @return string
 *   The retailer id.
 */
function publizon_get_retailer_id($account) {
  // Get the retailer id on the user.
  $profile = profile2_load_by_user($account, 'provider_publizon');
  $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
  return $profile_wrapper->field_publizon_retailer_id->value();
}
