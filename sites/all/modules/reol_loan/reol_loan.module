<?php
/**
 * @file
 * Code for the eReolen loan module feature.
 */

include_once 'reol_loan.features.inc';
require_once 'includes/reol_loan.loan.inc';

/**
 * Implements hook_permission().
 */
function reol_loan_permission() {
  return array(
    'perform loan' => array(
      'title' => t('Perform loan'),
      'description' => t('Perform a loan of an audiobook or ebook'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function reol_loan_menu() {
  $items = array();

  $items['ting/object/%ting_object/loan'] = array(
    'page callback' => 'reol_loan_loan_ajax',
    'page arguments' => array(2),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('perform loan'),
  );

  return $items;
}

/**
 * Implements hook_secure_permissions().
 *
 * Define which users should be able to perform a loan.
 */
function reol_loan_secure_permissions($role) {
  $permissions = array(
    'provider' => array(
      'perform loan',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function reol_loan_form_ding_loan_loans_form_alter(&$form, &$form_state) {
  // Move elements out of group. We do not wish to group items.
  foreach ($form['loans'] as $loan_group) {
    $children = element_children($loan_group);
    foreach ($children as $child) {
      if ($child == 'title') {
        continue;
      }
      $form['all_loans'][$child] = $loan_group[$child];

      // Add another information regarding when the loan expires.
      $loan = $form['all_loans'][$child]['#loan'];
      $time = strtotime(check_plain($loan->expiry));
      $time_diff = $time - time();

      // Add class according to how long time there is left.
      $class = " ";
      if ($time_diff < variable_get('reol_loan_low_time_max', 86400)) {
        $class .= 'low';
      }
      elseif ($time_diff < variable_get('reol_loan_medium_time_max', 604800)) {
        $class .= 'medium';
      }
      else {
        $class .= 'high';
      }

      $form['all_loans'][$child]['#information']['expire_in'] = array(
        'label' => t('Expires in'),
        'data' => format_interval($time - time(), 4),
        'class' => 'expires-in' . $class,
        '#weight' => 10,
      );

      // Change format of the two other dates.
      $form['all_loans'][$child]['#information']['loan_date']['data'] = format_date(strtotime(check_plain($loan->loan_date)), 'reol_base_material_lists_date');
      $form['all_loans'][$child]['#information']['expiry']['data'] = format_date(strtotime(check_plain($loan->expiry)), 'reol_base_material_lists_date');
    }
  }

  // Remove old groups.
  unset($form['loans']);
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * Add loan button on entity view page for audiobook or ebook.
 */
function reol_loan_ding_entity_buttons($type, $entity) {
  // Types that should have this button.
  $types = array(
    'lydbog (net)',
    'ebog',
  );

  if ($entity instanceof TingEntity && in_array(strtolower($entity->type), $types)) {
    drupal_add_library('system', 'drupal.ajax');

    $button = array(
      array(
        '#theme' => 'link',
        '#text' => t('Loan'),
        '#path' => 'ting/object/' . $entity->id . '/loan',
        '#options' => array(
          'attributes' => array(
            'class' => array(
              'action-button',
              'reserve-button',
              'use-ajax',
            ),
            'id' => 'reservation-' . $entity->id,
          ),
          'html' => FALSE,
        ),
      ),
    );

    return $button;
  }
}

/**
 * Implements hook_ding_entity_menu().
 *
 * Create menu callback for loaning an audiobook or ebook.
 */
function reol_loan_ding_entity_menu(&$items, $type, $path, $index) {
  if ($type == 'ding_entity') {
    $items[$path . '/loan'] = array(
      'title' => 'Loan',
      'page callback' => 'ding_provider_get_form',
      'page arguments' => array('reol_loan_loan_form', $index),
      'access callback' => TRUE,
    );
  }
}
